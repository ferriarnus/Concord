plugins {
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.155'
    id 'io.github.goooler.shadow' version '8.1.8'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'dev.sciwhiz12.gradle.simplversion' version '0.2.0'
}

versions {
    stripPattern = /^\d+\.\d+(?:\.[\dx]+)?-/
}
version = versions.version
println "Mod version: $version"

sourceSets {
    data
    main.resources {
        srcDirs += data.resources.srcDirs
        exclude '.cache/'
    }
}

java {
    archivesBaseName = "${project.name}-${mc_version}"
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
    withSourcesJar()
}

print "Java: ${System.getProperty('java.version')}"
print ", JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')})"
println ", Arch: ${System.getProperty('os.arch')}"

configurations {
    dataImplementation.extendsFrom implementation

    library
    implementation.extendsFrom library
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', logging_markers
        systemProperty 'forge.logging.console.level', logging_console
        systemProperty 'forge.enabledGameTestNamespaces', modid
        
        modSource project.sourceSets.main
        
        dependencies {
            runtime project.configurations.library
        }
    }
    
    client {
    }
    
    server {
        programArgument '--nogui'
    }
    
    gameTestServer {
    }
    
    data {
        programArguments.addAll '--mod', modid, '--all'
        programArguments.addAll '--output', sourceSets.data.resources.srcDirs[0].toString()
        programArguments.addAll '--existing', sourceSets.main.resources.srcDirs[0].toString()
        
        modSource project.sourceSets.data
    }
}

repositories {
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }
    maven {
        name 'jda-chewtils'
        url 'https://m2.chew.pro/releases'
    }
    maven {
        name 'jitpack'
        url 'https://jitpack.io'
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    library(group: 'com.github.matyrobbrt', name: 'JDA-Chewtils', version: jda_chewtils_version){
        exclude module: 'annotations'

    }

    library(group: 'net.dv8tion', name: 'JDA', version: jda_version) {
        exclude module: 'opus-java'
        exclude module: 'slf4j-api'
        exclude module: 'annotations'
        exclude module: 'jsr305'
    }

    dataImplementation sourceSets.main.output
}

license {
    header = project.file('HEADER.txt')
}

var manifestAttributes = [
        'Specification-Title'   : modid,
        'Specification-Vendor'  : author,
        'Specification-Version' : versions.rawVersion,
        'Implementation-Title'  : project.name,
        'Implementation-Version': versions.version,
        'Implementation-Vendor' : author,
        "Git-Commit"            : versions.fullCommitId,
        "Git-Commit-Timestamp"  : versions.commitTimestamp
] as LinkedHashMap

tasks.withType(Jar).configureEach {
    manifest.attributes(manifestAttributes)
    includeEmptyDirs false
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    // Normalize line endings from CRLF to LF
    filesMatching('META-INF/neoforge.mods.toml') {
        //noinspection UnnecessaryQualifiedReference
        filter(org.apache.tools.ant.filters.FixCrLfFilter.class,
                eol: org.apache.tools.ant.filters.FixCrLfFilter.CrLf.newInstance('lf'))
    }
}

tasks.named('jar', Jar).configure {
    archiveClassifier.set('lite')
}

@SuppressWarnings('GrMethodMayBeStatic')
def relocate(origin) {
    shadowJar.relocate(origin, "dev.sciwhiz12.concord.shadow.$origin")
}

// noinspection UnnecessaryQualifiedReference
tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar).configure {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    archiveClassifier.set('')

    configurations = [ project.configurations.library ]

    relocate 'com.iwebpp.crypto'
    relocate 'org.json'
    relocate 'net.sf.trove4j'
    relocate 'gnu.trove'

    relocate 'com.neovisionaries.ws.client'
    relocate 'okio'
    relocate 'okhttp3'
    relocate 'kotlin'

    relocate 'org.apache.commons.collections4'
    relocate 'javax.annotation'
    relocate 'com.fasterxml.jackson'

    relocate 'pw.chew.jda-chewtils'
    relocate 'net.dv8tion.jda'

    relocate 'club.minnced.discord.webhook'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/proguard/**'
    exclude 'META-INF/services/**'
    exclude 'META-INF/versions/9/module-info.class'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
    exclude 'module-info.class'
}

tasks.named('assemble') {
    dependsOn shadowJar
}

tasks.named('javadoc', Javadoc).configure {
    failOnError = false

    options.addStringOption('Xdoclint:all,-missing', '-public')
    options {
        tags = [
                'apiNote:a:<em>API Note:</em>',
                'implSpec:a:<em>Implementation Requirements:</em>',
                'implNote:a:<em>Implementation Note:</em>'
        ]

        author = false
        noSince = true
        noHelp = true
    }
}

publishing {
    publications.create('mavenJava', MavenPublication) {
        it.from components.java

        it.version = "$mc_version-${versions.rawVersion}${versions.snapshot ? '-SNAPSHOT' : ''}"
    }

    repositories {
        maven {
            name 'projectLocal'
            url "file://${project.file('repo').absolutePath}"
        }
    }
}
