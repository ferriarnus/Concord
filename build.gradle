import org.w3c.dom.NodeList

import javax.xml.xpath.XPathConstants
import javax.xml.xpath.XPathFactory

plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'tk.sciwhiz12.gradle.simplversion' version '0.1.0'
}

versions {
    stripPattern = /^\d+\.\d+\.[\dx]+-/
}
version = versions.version
println "Mod version: $version"

sourceSets {
    data
    main.resources {
        srcDirs += data.resources.srcDirs
        exclude '.cache/'
    }
}

print "Java: ${System.getProperty('java.version')}"
print ", JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')})"
println ", Arch: ${System.getProperty('os.arch')}"

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        configureEach {
            workingDirectory project.file('run/' + it.name) as File

            property 'forge.logging.markers', logging_markers
            property 'forge.logging.console.level', logging_console

            ideaModule "${project.name}.main"
            mods.register(modid as String) {
                source sourceSets.main as SourceSet
            }

            lazyToken('minecraft_classpath') {
                configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }

        client {
        }

        server {
        }

        data {
            args '--mod', modid, '--all'
            args '--output', sourceSets.data.resources.srcDirs[0].toString()
            args '--existing', sourceSets.main.resources.srcDirs[0].toString()

            ideaModule "${project.name}.data"
            mods.named(modid as String) {
                sources sourceSets.main as SourceSet, sourceSets.data as SourceSet
            }
        }
    }
}

configurations {
    library
    implementation.extendsFrom library

    dataImplementation.extendsFrom implementation
}

repositories {
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    library(group: 'net.dv8tion', name: 'JDA', version: jda_version) {
        exclude module: 'opus-java'
        exclude module: 'slf4j-api'
        exclude module: 'annotations'
        exclude module: 'jsr305'
    }
    //library group: 'club.minnced', name: 'discord-webhooks', version: webhook_version

    dataImplementation sourceSets.main.output
}

java {
    archivesBaseName = "${project.name}-${mc_version}"
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
    withSourcesJar()
}

license {
    header = project.file('HEADER.txt')
}

var manifestAttributes = [
        'Specification-Title'   : modid,
        'Specification-Vendor'  : author,
        'Specification-Version' : versions.rawVersion,
        'Implementation-Title'  : project.name,
        'Implementation-Version': versions.version,
        'Implementation-Vendor' : author,
        "Git-Commit"            : versions.fullCommitId,
        "Git-Commit-Timestamp"  : versions.commitTimestamp
] as LinkedHashMap

tasks.withType(Jar).configureEach {
    manifest.attributes(manifestAttributes)
    includeEmptyDirs false
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    // Normalize line endings from CRLF to LF
    filesMatching('META-INF/mods.toml') {
        //noinspection UnnecessaryQualifiedReference
        filter(org.apache.tools.ant.filters.FixCrLfFilter.class,
                eol: org.apache.tools.ant.filters.FixCrLfFilter.CrLf.newInstance('lf'))
    }
}

tasks.named('jar', Jar).configure {
    finalizedBy 'reobfJar'
    archiveClassifier.set('lite')
}
@SuppressWarnings('GrMethodMayBeStatic')
def relocate(origin) {
    shadowJar.relocate(origin, "tk.sciwhiz12.concord.shadow.$origin")
}

// noinspection UnnecessaryQualifiedReference
tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar).configure {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    archiveClassifier.set('')

    configurations = [ project.configurations.library ]

    relocate 'com.iwebpp.crypto'
    relocate 'org.json'
    relocate 'net.sf.trove4j'
    relocate 'gnu.trove'

    relocate 'com.neovisionaries.ws.client'
    relocate 'okio'
    relocate 'okhttp3'

    relocate 'org.apache.commons.collections4'
    relocate 'javax.annotation'
    relocate 'com.fasterxml.jackson'

    relocate 'net.dv8tion.jda'
    relocate 'club.minnced.discord.webhook'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/proguard/**'
    exclude 'META-INF/services/**'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
    exclude 'module-info.class'

    finalizedBy 'reobfShadowJar'
}

tasks.named('assemble') {
    dependsOn shadowJar
}

reobf {
    shadowJar {}
}

// Without these two, Gradle will issue warnings about task inputs from other tasks outputs without declaring dependencies
tasks.named('reobfShadowJar') { dependsOn tasks.named('jar') }
tasks.named('shadowJar') { dependsOn 'reobfJar' }

// noinspection UnnecessaryQualifiedReference
tasks.withType(net.minecraftforge.gradle.userdev.tasks.RenameJarInPlace).configureEach {
    // Check if the tool is SpecialSource, just in case FG changes to using ForgeAutoRenamingTool in the future
    if (it.tool.get().contains('SpecialSource')) {
        args.add('--stable')
    }
}

tasks.named('javadoc', Javadoc).configure {
    failOnError = false

    options.addStringOption('Xdoclint:all,-missing', '-public')
    options {
        tags = [
                'apiNote:a:<em>API Note:</em>',
                'implSpec:a:<em>Implementation Requirements:</em>',
                'implNote:a:<em>Implementation Note:</em>'
        ]

        author = false
        noSince = true
        noHelp = true
    }
}

publishing {
    publications.create('mavenJava', MavenPublication) {
        it.from components.java

        it.artifactId = project.name
        it.version = "$mc_version-${versions.rawVersion}${versions.snapshot ? '-SNAPSHOT' : ''}"

        // Modifies POM by removing the '_mapped_' part of dependency versions
        it.pom { MavenPom pom ->
            pom.withXml { xml ->
                var xmlElement = xml.asElement()
                try {
                    // Selects the 'version' child element of any 'dependency' element
                    var xPath = XPathFactory.newInstance().newXPath().compile("//*[local-name()=\"dependency\"]/*[local-name()=\"version\"]")
                    NodeList versionNodes = (NodeList) xPath.evaluate(xmlElement, XPathConstants.NODESET)
                    for (int i = 0; i < versionNodes.length; i++) {
                        var node = versionNodes.item(i)
                        var mappedIdx = node.textContent.lastIndexOf("_mapped_")
                        if (mappedIdx != -1) {
                            node.setTextContent(node.textContent.substring(0, mappedIdx))
                        }
                    }
                } catch (Exception e) {
                    project.logger.error("Error attempting to modify pom file", e)
                }
            }
        }
    }

    repositories {
        maven {
            name 'projectLocal'
            url "file://${project.file('repo').absolutePath}"
        }
    }
}
