/*
 * Concord - Copyright (c) 2020 SciWhiz12
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package dev.sciwhiz12.concord.command;

import com.jagrosh.jdautilities.command.SlashCommandEvent;
import dev.sciwhiz12.concord.Concord;
import dev.sciwhiz12.concord.command.discord.BanCommand;
import dev.sciwhiz12.concord.command.discord.CommandDispatcher;
import dev.sciwhiz12.concord.command.discord.KickCommand;
import dev.sciwhiz12.concord.command.discord.WhitelistCommand;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.util.Mth;
import net.neoforged.api.distmarker.Dist;
import net.neoforged.fml.loading.FMLLoader;

import java.awt.*;
import java.time.Instant;

/**
 * The Discord command hub.
 *
 * Has several sub-commands, some of which are usable by everyone:
 *  - list; lists players on the connected server.
 *  - tps; displays ticks per second in a format similar to /forge tps.
 *  - help; displays help autogenerated from the registered commands.
 * Some commands are only usable by administrators:
 *  - kick <user> [reason]; remove a user from the server, optionally with the specified reason. See @link{KickCommand}.
 *  - ban <user> [reason]; ban a user from the server, optionally with the specified reason. See @link{BanCommand}
 *  - whitelist <remove|add> <user>; add or remove a user from the server's whitelist. See @link{WhitelistCommand}
 *      The above commands are implemented separately, due to requirements of the option system.
 *  - stop; stop and shutdown the connected server. Disabled on singleplayer worlds.
 *
 * @author Curle
 */
public class ConcordDiscordCommand {
    private static JDA bot;
    private static MinecraftServer server;

    private static void tpsCommand(SlashCommandInteractionEvent tpsEvent) {
        double meanTickTime = mean(server.getTickTimesNanos()) * 1.0E-6D;
        double meanTPS = Math.min(1000.0/meanTickTime, 20);

        StringBuilder builder = new StringBuilder();

        for (ServerLevel dim : server.getAllLevels()) {
            long[] times = server.getTickTime(dim.dimension());

            if (times == null)
                times = new long[]{0};

            double worldTickTime = mean(times) * 1.0E-6D;
            double worldTPS = Math.min(1000.0 / worldTickTime, 20);

            builder.append(dim.dimension().location()).append(": Mean tick time: ").append(worldTickTime).append(" ms. Mean TPS: ").append(worldTPS).append("\n");
        }

        tpsEvent.replyEmbeds(new EmbedBuilder()
                .setTitle("Concord integrations")
                .setDescription("TPS Performance Report")
                .addField("Overall performance", "Mean tick time: " + meanTickTime + " ms. Mean TPS: " + meanTPS, false)
                .addField("Performance per dimension", builder.toString(), false)
                .setColor(Color.ORANGE)
                .setTimestamp(Instant.now())
                .build()
        ).setEphemeral(true).queue();
    }

    private static long mean(long[] values) {
        long sum = 0L;
        for (long v : values)
            sum += v;
        return sum / values.length;
    }

    private static void helpCommand(SlashCommandInteractionEvent helpEvent) {
        var dispatcher = Concord.BOT.getDispatcher();
        var commands = dispatcher.getCommands();

        var builder = new EmbedBuilder().setTitle("Concord Commands")
                .setDescription("There are " + commands.size() + " registered commands.");

        for (var command : commands) {
            builder.addField(command.getName(), command.getHelpString(), true);
        }

        helpEvent.replyEmbeds(builder.setTimestamp(Instant.now()).setColor(Color.GREEN).build()).setEphemeral(false).queue();
    }

    public static void initialize(CommandDispatcher dispatcher) {
        dispatcher.registerSingle("list", "List all online users.", "Show a count of online users, and their names.", (listEvent) -> {
            listEvent.replyEmbeds(new EmbedBuilder()
                    .setTitle("Concord Integrations")
                    .setDescription("There are currently " + server.getPlayerCount() + " people online.")
                    .addField("Online Players", String.join("\n", server.getPlayerNames()), false)
                    .setTimestamp(Instant.now())
                    .setColor(Color.CYAN)
                    .build()
            ).setEphemeral(true).queue();
        });

        dispatcher.registerSingle("tps", "Show the performance of the server.", "Display a breakdown of server performance, in current, average and separated by dimension.", ConcordDiscordCommand::tpsCommand);
        dispatcher.registerSingle("help", "Show detailed information about every single available command.", "Show the help information you are currently reading.", ConcordDiscordCommand::helpCommand);
        dispatcher.registerSingle("stop", "Shut down your Minecraft server.", "Immediately schedule the shutdown of the Minecraft server, akin to /stop from in-game.", (event) -> {
            // Short-circuit if on integrated server
            if(FMLLoader.getDist() == Dist.CLIENT) {
                event.reply("Sorry! This command is disabled on Integrated servers.").setEphemeral(true).queue();
                return;
            }

            event.reply("Shutting the server down..").queue();
            Concord.BOT.getServer().halt(false);
        });


        dispatcher.registerSingle(KickCommand.INSTANCE);
        dispatcher.registerSingle(BanCommand.INSTANCE);
        dispatcher.registerSingle(WhitelistCommand.INSTANCE);
    }

    public static void postInit() {
        bot = Concord.BOT.getDiscord();
        server = Concord.BOT.getServer();
    }
}
